#!/bin/bash
#
### BEGIN INIT INFO
# Provides:          bangdb-agent
# Required-Start:    $syslog
# Required-Stop:     $syslog
# Should-Start:      $network
# Should-Stop:       $network
# Default-Start:     2 3 5
# Default-Stop:      1
# Short-Description: bangdb agent daemon
# Description:       BangDB agent
### END INIT INFO
#

PWD_BIN="/bin/pwd"
DIRNAME_BIN="/usr/bin/dirname"

SELF="$0"
INVOKE_DIR=$(${PWD_BIN} -P)
cd $(${DIRNAME_BIN} ${SELF})
SCRIPT_DIR=$(${PWD_BIN} -P)
cd ${INVOKE_DIR}

NAME=bangdb-agent_s-2.0
BIN_DIR="${SCRIPT_DIR}/bin"
BINARY="${BIN_DIR}/${NAME}"
VAR_DIR="${SCRIPT_DIR}/var"
PID_DIR="${VAR_DIR}/run"
PIDFILE="${PID_DIR}/${NAME}.pid"
CONFIG_DIR="${BIN_DIR}"
CONFIG_FILE_BANGDB="${CONFIG_DIR}/bangdb.config"
#MAIL_CONFIG_CHECK="${BIN_DIR}/mail-config-check"
#MONITOR_SCRIPT="${BIN_DIR}/bangdb-monitor"

DESC="BangDB Server"

unset TMPDIR

# Exit if the package is not installed.
test -x ${BINARY} || (echo "Error : No execute permissions on ${BINARY}" && exit 0)
#test -r ${CONFIG_FILE_AGENT} || (echo "Error : No read permissions on file ${CONFIG_FILE_AGENT}" && exit 0)
test -r ${CONFIG_FILE_BANGDB} || (echo "Error : No read permissions on file ${CONFIG_FILE_BANGDB}" && exit 0)

# Source function library.
# . /lib/lsb/init-functions

start() {
	N=15;
	if [ -f ${PIDFILE} ]
	then
		PID=$(cat ${PIDFILE})
		echo -n "Starting '${NAME}' : "
		echo -e "\033[${N}C\e[33mAlready running (${PID})\e[0m"
		return 2;
	elif [ $(pidof ${NAME}) ]
		then
		PID=$(pidof ${NAME})
		echo -n "Starting '${NAME}' : "
		echo -e "\033[${N}C\e[33mAlready running (${PID})\e[0m"
		return 2;
	fi
	cd ${BIN_DIR}
<< 'COMMENT'
	#
	# Setting up the core-pattern
	#
	def_path_to_cores="/var/crash"
	if [ -d ${def_path_to_cores} ]
	then
		# core.<executable_name>.<pid>.<hostname>.<time_of_dump>
		echo "Updating the core-pattern file.. needs admin rights for the same"
		echo "${def_path_to_cores}/core.%e.%p.%h.%t" | sudo tee /proc/sys/kernel/core_pattern &> /dev/null
	else
		# Using the current directory as the path for core
		def_path_to_cores=${PWD}
		# core.<executable_name>.<pid>.<hostname>.<time_of_dump>
		echo "Updating the core-pattern file.. needs admin right for the same"
		echo "${def_path_to_cores}/core.%e.%p.%h.%t" | sudo tee /proc/sys/kernel/core_pattern &> /dev/null
	fi
COMMENT
	echo -n "Starting '${NAME}' : "
#	if [ ! $(bash ${MAIL_CONFIG_CHECK}) ]
#	then
#		bash ${MONITOR_SCRIPT} "bangdb-agent-2.0" "sachin@bangdb.com" "${BINARY} -e" &
#	else
		${BINARY} -b yes -c hybrid -w 18000 -f linux_agent.conf
		RETVAL=$?
#	fi
	sleep 4
	if [ ! $(pidof ${NAME}) ]
	then
		echo -e "\033[${N}C\e[31mFailed\e[0m"
		return -1;
	else
		PID_NUM=$(pidof ${NAME})
		mkdir -p $(${DIRNAME_BIN} ${PIDFILE})
		echo ${PID_NUM} > ${PIDFILE}
		echo -e "\033[${N}C\e[32mDone\e[0m"
	fi
	return ${RETVAL}
}

stop() {
	echo -n "Shutting down '${NAME}' : "
	N=10;
	if [ -f ${PIDFILE} ]
	then
		PID=$(cat ${PIDFILE})
		kill -s SIGINT ${PID} 2> /dev/null
		if [ $? -eq 1 ]
		then
			rm -f ${PIDFILE} 2> /dev/null
		fi
	elif [ $(pidof ${NAME}) ]
	then
		PID=$(pidof ${NAME})
		kill -s SIGINT ${PID} 2> /dev/null
	else
		echo -e "\033[${N}C\e[33mAlready stopped\e[0m"
		return 2;
	fi
	count=0
	SLIMIT=30
	while [ ${count} -lt 30 ]
	do
		sleep 1
		count=$(expr ${count} + 1)
		if [ ! $(pidof ${NAME}) ]
		then
			count=${SLIMIT}
		fi
	done
	if [ $(pidof ${NAME}) ]
	then
		PID=$(pidof ${NAME})
		echo -ne "\033[${N}C\e[33mWaiting on pid ${PID}.. \e[0m"
	fi
	while [ $(pidof ${NAME}) ]
	do
		sleep 1
	done
	echo -e "\033[${N}C\e[32mDone\e[0m"
	rm -f ${PIDFILE}
	return 0
}

status() {
	N=17;
	echo -n "Status '${NAME}' : "
	if [ -f ${PIDFILE} ]
	then
		PID=$(cat ${PIDFILE})
		kill -s 0 ${PID} 2> /dev/null
		if [ $? -eq 1 ]
		then
			echo -e "\033[${N}C\e[31mDead\e[0m"
		else
			echo -e "\033[${N}C\e[32mRunning\e[0m"
		fi
	elif [ $(pidof ${NAME}) ]
	then
		PID=$(pidof ${NAME})
		echo -e "\033[${N}C\e[32mRunning\e[0m"
	else
		echo -e "\033[${N}C\e[32mStopped\e[0m"
	fi
	return 0
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
				status
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage:  {start|stop|status|restart}"
        exit 1
        ;;
esac
exit $?
